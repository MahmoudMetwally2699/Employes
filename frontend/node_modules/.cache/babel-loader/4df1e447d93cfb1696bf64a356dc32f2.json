{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mahmoud\\\\Downloads\\\\Walk-in-System-main\\\\Walk-in-System-main\\\\frontend\\\\src\\\\lib\\\\EmailInput.js\";\nimport { TextField } from \"@material-ui/core\";\n\nconst EmailInput = props => {\n  const {\n    label,\n    value,\n    onChange,\n    inputErrorHandler,\n    handleInputError,\n    required,\n    className\n  } = props;\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    label: label,\n    variant: \"outlined\",\n    value: value,\n    onChange: onChange,\n    helperText: inputErrorHandler.email.message,\n    onBlur: event => {\n      if (event.target.value === \"\") {\n        if (required) {\n          handleInputError(\"email\", true, \"Email is required\");\n        } else {\n          handleInputError(\"email\", false, \"\");\n        }\n      } else {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if (re.test(String(event.target.value).toLowerCase())) {\n          handleInputError(\"email\", false, \"\");\n        } else {\n          handleInputError(\"email\", true, \"Incorrect email format\");\n        }\n      }\n    },\n    error: inputErrorHandler.email.error,\n    className: className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EmailInput;\nexport default EmailInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailInput\");","map":{"version":3,"sources":["C:/Users/Mahmoud/Downloads/Walk-in-System-main/Walk-in-System-main/frontend/src/lib/EmailInput.js"],"names":["TextField","EmailInput","props","label","value","onChange","inputErrorHandler","handleInputError","required","className","email","message","event","target","re","test","String","toLowerCase","error"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,mBAA1B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;AAUA,sBACE,QAAC,SAAD;AACE,IAAA,KAAK,EAAEC,KADT;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,UAAU,EAAEC,iBAAiB,CAACI,KAAlB,CAAwBC,OALtC;AAME,IAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,UAAIA,KAAK,CAACC,MAAN,CAAaT,KAAb,KAAuB,EAA3B,EAA+B;AAC7B,YAAII,QAAJ,EAAc;AACZD,UAAAA,gBAAgB,CAAC,OAAD,EAAU,IAAV,EAAgB,mBAAhB,CAAhB;AACD,SAFD,MAEO;AACLA,UAAAA,gBAAgB,CAAC,OAAD,EAAU,KAAV,EAAiB,EAAjB,CAAhB;AACD;AACF,OAND,MAMO;AACL,cAAMO,EAAE,GAAG,uJAAX;;AACA,YAAIA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACJ,KAAK,CAACC,MAAN,CAAaT,KAAd,CAAN,CAA2Ba,WAA3B,EAAR,CAAJ,EAAuD;AACrDV,UAAAA,gBAAgB,CAAC,OAAD,EAAU,KAAV,EAAiB,EAAjB,CAAhB;AACD,SAFD,MAEO;AACLA,UAAAA,gBAAgB,CAAC,OAAD,EAAU,IAAV,EAAgB,wBAAhB,CAAhB;AACD;AACF;AACF,KArBH;AAsBE,IAAA,KAAK,EAAED,iBAAiB,CAACI,KAAlB,CAAwBQ,KAtBjC;AAuBE,IAAA,SAAS,EAAET;AAvBb;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAtCD;;KAAMR,U;AAwCN,eAAeA,UAAf","sourcesContent":["import { TextField } from \"@material-ui/core\";\n\nconst EmailInput = (props) => {\n  const {\n    label,\n    value,\n    onChange,\n    inputErrorHandler,\n    handleInputError,\n    required,\n    className,\n  } = props;\n\n  return (\n    <TextField\n      label={label}\n      variant=\"outlined\"\n      value={value}\n      onChange={onChange}\n      helperText={inputErrorHandler.email.message}\n      onBlur={(event) => {\n        if (event.target.value === \"\") {\n          if (required) {\n            handleInputError(\"email\", true, \"Email is required\");\n          } else {\n            handleInputError(\"email\", false, \"\");\n          }\n        } else {\n          const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          if (re.test(String(event.target.value).toLowerCase())) {\n            handleInputError(\"email\", false, \"\");\n          } else {\n            handleInputError(\"email\", true, \"Incorrect email format\");\n          }\n        }\n      }}\n      error={inputErrorHandler.email.error}\n      className={className}\n    />\n  );\n};\n\nexport default EmailInput;\n"]},"metadata":{},"sourceType":"module"}